syntax = "proto3";

import "proto/google/protobuf/empty.proto";

option go_package="./";

//Phase 1: Prepare-Promise phase
message PrepareMsg {
  string From = 1;
  // Safety
  uint64 Ballot = 2;

  // Liveness
  float K = 3;
  repeated BFTTimeStamp  TimeStamp = 4;
  // if ballot is ID of node no need for BallotQC (the first try)
  optional BallotQuorumCert BallotQC = 5;
}

message PromiseMsg {
  bool Contention = 1;
  uint64 Ballot = 2;
  // optional Ballot previously accepted
  optional uint64 AcceptedBallot = 3;
  // optional Value previously accepted
  optional string AcceptedValue = 4;
  // optional QC for AcceptedValue
  optional AcceptQuorumCert PreAcceptQC= 5;

  // Liveness
  BFTTimeStamp  TimeStamp = 6;
  // Partial signature over the NextBallot
  uint64 NextBallot = 7;
  PartialSignature BallotSig = 8;
}

//Phase 2: Pre_Propose-Pre_Accept phase
message PreProposeMsg {
  string From = 1;
  uint64 Ballot = 2;
  // Value chosen according to the PromiseSet
  string Pre_proposeValue = 3;
  // A list of Promise, used to convince acceptors the Pre_proposeValue has the highest ballot number
  repeated PromiseMsg PromiseSet = 4;

}

// Used in both phase2 and phase3
message AcceptMsg {
  bool Contention = 1;
  uint64 Phase = 2;
  uint64 Ballot = 3;
  // Value are pre_accepted/accepted
  string AcceptValue = 4;
  // Partial signature over the tuple < Phase, Ballot, AcceptValue >
  PartialSignature SafetySig = 5;

  // Liveness
  BFTTimeStamp TimeStamp = 6;
  // Partial signature over the NextBallot
  uint64 NextBallot = 7;
  PartialSignature BallotSig = 8;
}

message AcceptQuorumCert {
  uint64 Phase = 1;
  uint64 Ballot = 2;
  // Value are pre_accepted/accepted
  string AcceptValue = 3;
  // QuorumSignature is combined from a quorum of partial signature
  QuorumSignature Sig = 4;
}

//Phase 3: Propose-Accept phase
message ProposeMsg {
  string From = 1;
  uint64 Ballot = 2;
  string ProposeValue = 3;

  AcceptQuorumCert PreAcceptQC = 4;

}
//Commit
message CommitMsg {
  string From = 1;
  uint64 Ballot = 2;
  string CommitValue = 3;

  AcceptQuorumCert AcceptQC = 4;

}

// crypto part
message PartialSignature {
  //????
}

message QuorumSignature {
  //????
}

// backoff part

message BallotQuorumCert {
  uint64 NextBallot = 1;
  QuorumSignature BallotSig = 2;
}

message BFTTimeStamp {
  string Singer = 1;
  uint64 Ballot = 2;
  int64 Timestamp = 3;
  // We might need to attach a hash for <Singer, Ballot, Timestamp>
  //bytes Hash = 4;
}

service BFTBaxos {
  rpc Promise (PrepareMsg) returns (PromiseMsg);
  rpc PreAccept (PreProposeMsg) returns (AcceptMsg);
  rpc Accept (ProposeMsg) returns (AcceptMsg);
  rpc Commit (CommitMsg) returns (google.protobuf.Empty);
}

