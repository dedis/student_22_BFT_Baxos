syntax = "proto3";

option go_package="./";

//Phase 1: Prepare-Promise phase
message PrepareMsg {
  string From = 1;
  // Safety
  uint64 Ballot = 2;
  // Liveness
  double K = 3;
  bytes KProof = 4;
  repeated BFTTimeStamp  TimeStamp = 5;
  // if ballot is ID of node no need for BallotQC (the first try)
  optional QuorumCert BallotQC = 6;
}

message PromiseMsg {
  bool Contention = 1;
  uint64 Ballot = 2;
  // optional Ballot previously accepted
  bool Accepted = 3;
  optional uint64 AcceptedBallot = 4;
  // optional Value previously accepted
  optional string AcceptedValue = 5;
  // consider add <Ballot, AcceptedBallot, AcceptedValue> later
  // ECDSASignature PromiseCert = 5;
  // optional QC for AcceptedValue
  optional QuorumCert PreAcceptQC= 6;
  // Liveness
  BFTTimeStamp  TimeStamp = 7;
  // < Phase, NextBallot >
  PartialCert BallotPartCert = 8;
}

//Phase 2: Pre_Propose-Pre_Accept phase
message PreProposeMsg {
  string From = 1;
  uint64 Ballot = 2;
  // Value chosen according to the PromiseSet
  string Pre_proposeValue = 3;
  // A list of Promise, used to convince acceptors the Pre_proposeValue has the highest ballot number
  repeated PromiseMsg PromiseSet = 4;

}

// Used in both phase2 and phase3
message AcceptMsg {
  bool Contention = 1;

  uint64 Phase = 2;  //1 phase2 2 phase 3
  uint64 Ballot = 3;
  string AcceptValue = 4; // Value are pre_accepted/accepted
  // Partial signature over the tuple < Phase, Ballot, AcceptValue >
  PartialCert AcceptPartCert = 5;
  // Liveness
  BFTTimeStamp TimeStamp = 6;
  // Partial signature over the NextBallot < Phase, NextBallot >
  // now we only provide it in prepare-promise phase
  // PartialCert BallotPartCert = 7;
}

//Phase 3: Propose-Accept phase
message ProposeMsg {
  string From = 1;
  uint64 Ballot = 2;
  string ProposeValue = 3;

  QuorumCert PreAcceptQC = 4;

}
//Commit
message CommitMsg {
  string From = 1;
  uint64 Ballot = 2;
  string CommitValue = 3;

  QuorumCert AcceptQC = 4;

}

message ECDSASignature {
  string Signer = 1;
  bytes R = 2;
  bytes S = 3;
}

message Signature {
  string Signer = 1;
  bytes signature = 2;
}

message PartialCert {
  Signature Sig = 1;
  uint64 type= 2;  // 1: phase2 2: phase3 3: nextBallot
}

message QuorumCert {
  repeated Signature Sigs = 1;
  uint64 type= 2;  // 1: phase2 2: phase3 3: nextBallot
  bytes Hash = 3;
}

// backoff part
message BFTTimeStamp {
  string Singer = 1;
  uint64 Ballot = 2;
  int64 Timestamp = 3;
  // We need to attach a hash for <Singer, Ballot, Timestamp>
  // But I have no time now, let's leave this backdoor for hacker!
  //bytes Hash = 4;
}

message Empty {}

service BFTBaxos {
  rpc Promise (PrepareMsg) returns (PromiseMsg);
  rpc PreAccept (PreProposeMsg) returns (AcceptMsg);
  rpc Accept (ProposeMsg) returns (AcceptMsg);
  rpc Commit (CommitMsg) returns (Empty);
}

